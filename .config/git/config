[user]
name = FewCM
email = sweewei.tham@gmail.com

[color]
ui = auto

[color "branch"]
current = red reverse
local = blue
remote = green

[color "diff"]
meta = yellow bold
frag = magenta bold
old = red bold
new = green bold
plain = white
commit = yellow bold
whitespace = red reverse

[color "status"]
added = yellow
changed = green
untracked = cyan

[core]
quotepath = off
editor = code --wait
whitespace = -trailing-space
pager = diff-so-fancy | less --tabs=4 -RFX
eol          = lf

[i18n]
logoutputencoding = utf8
commitencoding = utf8

[apply]
whitespace = nowarn

[push]
default = current

[pull]
default = current
rebase = false

[alias]
ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%an]" --decorate --date=relative
ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [a:%an,c:%cn]" --decorate --numstat
lc = "!f() { git ll "$1"^.."$1"; }; f"
cl = clone
ci = commit
co = checkout
br = branch
# fuzzy commands (require fzf)
# get file
zf = "!f() { \
            local file=$(git ls-files $(git rev-parse --show-toplevel) | fzf -m); \
            if [[ -z $file ]]; then return 1; fi; \
            echo \"$file\"; \
      }; f"
# get branch
# consider: g branch -a --format '%(refname); \
zb = "!f() { \
            local branch=$(git branch -a --sort=-committerdate | grep -v 'remotes/' | fzf -m); \
            if [[ -z $branch ]]; then return 1; fi; \
            echo \"$branch\"; \
      }; f"
# fuzzy open
zop = "!f() { \
            local file=$(git zf); \
            if [[ -z $file ]]; then return 1; fi; \
            $(git editor) $file; \
            echo $(git editor) $file; \
      }; f"
# fuzzy grep (does only one file)
zgop = "!f() { \
            local raw_selection=$(git grep -n '.*' | fzf); \
            if [[ -z $raw_selection ]]; then return 1; fi; \
            local selection=${raw_selection%:*}; \
            local file=${selection%:*}; \
            local line=${selection##*:}; \
            $(git editor) +\"$line\" \"$file\"; \
            echo $(git editor) +\"$line\" \"$file\"; \
      }; f"
# fuzzy checkout (could be much improved, have tags, branches, remotes)
zc = "!f() { \
            local branch=$(git zb); \
            if [[ -z $branch ]]; then return 1; fi; \
            git checkout $branch; \
            echo git checkout $branch; \
      }; f"
zch = "!f() { \
            local commit=$(git zh); \
            if [[ -z $commit ]]; then return 1; fi; \
            git checkout $commit; \
            echo git checkout $commit; \
                  }; f"
# fuzzy show
# see: https://gist.github.com/junegunn/f4fca918e937e6bf5bad
zsh = "!f() { \
            git log --graph --color=always --abbrev=7 --format='%C(auto)%h %an %C(blue)%s %C(yellow)%cr' $@ | fzf --ansi --no-sort --reverse --tiebreak=index \
            --preview \"f() { set -- \\$(echo -- \\$@ | grep -o '[a-f0-9]\\{7\\}'); [ \\$# -eq 0 ] || git show --color=always \\$1 $filter; }; f {}\" \
            --preview-window=right:60% \
            --height 80%; \
      }; f"
zshs = "!f() { \
            git log --graph --color=always --abbrev=7 --format='%C(auto)%h %an %C(blue)%s %C(yellow)%cr' $@ | fzf --ansi --no-sort --reverse --tiebreak=index \
            --preview \"f() { set -- \\$(echo -- \\$@ | grep -o '[a-f0-9]\\{7\\}'); [ \\$# -eq 0 ] || git show --color=always --stat \\$1 $filter; }; f {}\" \
            --preview-window=right:60% \
            --height 80%; \
      }; f"
# fuzzy diff
zd = "!f() { \
            local commit=$(git zh); \
            if [[ -z $commit ]]; then return 1; fi; \
            git $(git differ) $commit; \
            echo git $(git differ) $commit; \
      }; f"
# TODO: make a single command that lists
#       commits, tags, branches, remotes
#       use in the fuzzy stuff

[init]
defaultBranch = main

[filter "lfs"]
clean = git-lfs clean -- %f
smudge = git-lfs smudge -- %f
process = git-lfs filter-process
required = true

[credential]
helper = /home/fewcm/.local/bin/git_credentials_from_pass $@
